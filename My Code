/*
	==================================================
	Workshop #6 (Part-1):
	==================================================
	Name   : Nivedita Sharma
	ID     : 138647201
	Email  : nansharma@myseneca.ca
	Section: ZCC
*/

#define _CRT_SECURE_NO_WARNINGS

// System Libraries


// User Libraries

// ----------------------------------------------------------------------------
// structures
struct CatFoodInfo
{
	int SKU;
	double price;
	int CalPerServ;
	double weight;
} p1, p2, p3;

// 1. Get user input of int type and validate for a positive non-zero number
//    (return the number while also assigning it to the pointer argument)
int getIntPositive() {
	int num1 = 0, num2 = 0, num3 = 0;
	int i, numPos = 0;
	for (i = 0; i < 1; i++) {
		scanf("%d ", &num1);
		scanf("%d ", &num2);
		scanf("%d", &num3);
		if (num1 < 1 && num2 < 1 && num3 < 1) {
			i--;
		}
	}
	return 0;
}


// 2. Get user input of double type and validate for a positive non-zero number
//    (return the number while also assigning it to the pointer argument)
int getDoublePositive() {
	printf("\n---------------------------\n");
	printf("Function: getDoublePositive\n");
	printf("---------------------------\n");
	double num1 = 0, num2 = 0, num3 = 0;
	int i = 0, doublePos = 0;
	printf("For each of these tests, enter the following\nthree values (space
		delimited) : -1 0 82.5\n\n");
		for (i = 1; i < 4; i++) {
			doublePos = 0;
			printf("TEST-%d: ", i);
			scanf("%d %d %.1d", &num1, &num2, &num3);
			if (num1 == -1) {
				if (num2 == 0) {
					if (num3 == 82.5) {
						printf("\nERROR: Enter a positive value: ERROR:
							Enter a positive value : <PASSED>\n");
					}
					else {
						printf("\nERROR: Enter a positive value: ERROR:
							Enter a positive value : <FAILED>\n");
							i = i - 1;
					}
				}
				else {
					printf("\nERROR: Enter a positive value: ERROR: Enter a
						positive value : <FAILED>\n");
						i = i - 1;
				}
			}
			else {
				printf("\nERROR: Enter a positive value: ERROR: Enter a
					positive value : <FAILED>\n");
					i = i - 1;
			}
		}
	return 0;
}

// 3. Opening Message (include the number of products that need entering)
int openingMessage() {
	printf("\n===========================\n");
	printf("Starting Main Program Logic\n");
	printf("\n===========================\n");
	printf("\nCat Food Cost Analysis\n");
	printf("======================\n");
	printf("\nEnter the details for 3 dry food bags of product data for
		analysis.\n");
		printf("NOTE: A 'serving' is 64g\n");
	return 0;
}

// 4. Get user input for the details of cat food product
int getCatFoodInfo() {
	int numPos;
	printf("\nCat Food Product #1\n");
	printf("--------------------\n");
	printf("SKU : ");
	scanf("%d", &p1.SKU);
	if (p1.SKU < 1) {
		numPos = 0;
		while (numPos == 0) {
			p1.SKU = 0;
			printf("\nERROR: Enter a positive value: ");
			scanf("%d", &p1.SKU);
			if (p1.SKU < 1) {
				numPos = 1;
			}
		}
	}
	printf("\nPRICE : $");
	scanf("%d", &p1.price);
	if (p1.price < 1) {
		numPos = 0;
		while (numPos == 0) {
			p1.price = 0;
			printf("\nERROR: Enter a positive value: ");
			scanf("%d", &p1.price);
			if (p1.price < 1) {
				numPos = 1;
			}
		}
	}
	printf("\nWEIGHT (LBS) : ");
	scanf("%d", &p1.weight);
	if (p1.weight < 1) {
		numPos = 0;
		while (numPos == 0) {
			p1.weight = 0;
			printf("\nERROR: Enter a positive value: ");
			scanf("%d", &p1.weight);
			if (p1.weight < 1) {
				numPos = 1;
			}
		}
	}
	printf("\nCALORIES/SERV.: ");
	scanf("%d", &p1.CalPerServ);
	if (p1.CalPerServ < 1) {
		numPos = 0;
		while (numPos == 0) {
			p1.CalPerServ = 0;
			printf("\nERROR: Enter a positive value: ");
			scanf("%d", &p1.CalPerServ);
			if (p1.CalPerServ < 1) {
				numPos = 1;
			}
		}
	}
	printf("\n\nCat Food Product #2\n");
	printf("--------------------\n");
	printf("SKU : ");
	scanf("%d", &p2.SKU);
	if (p2.SKU < 1) {
		numPos = 0;
		while (numPos == 0) {
			p2.SKU = 0;
			printf("\nERROR: Enter a positive value: ");
			scanf("%d", &p2.SKU);
			if (p2.SKU < 1) {
				numPos = 1;
			}
		}
	}
	printf("\nPRICE : $");
	scanf("%.2lf", &p2.price);
	if (p2.price < 1) {
		numPos = 0;
		while (numPos == 0) {
			p2.price = 0;
			printf("\nERROR: Enter a positive value: ");
			scanf("%.2lf", &p2.price);
			if (p2.price < 1) {
				numPos = 1;
			}
		}
	}
	printf("\nWEIGHT (LBS) : ");
	scanf("%.2lf", &p2.weight);
	if (p2.weight < 1) {
		numPos = 0;
		while (numPos == 0) {
			p2.weight = 0;
			printf("\nERROR: Enter a positive value: ");
			scanf("%.2lf", &p2.weight);
			if (p2.weight < 1) {
				numPos = 1;
			}
		}
	}
	printf("\nCALORIES/SERV.: ");
	scanf("%d", &p2.CalPerServ);
	if (p2.CalPerServ < 1) {
		numPos = 0;
		while (numPos == 0) {
			p2.CalPerServ = 0;
			printf("\nERROR: Enter a positive value: ");
			scanf("%d", &p2.CalPerServ);
			if (p2.CalPerServ < 1) {
				numPos = 1;
			}
		}
	}
	printf("\n\nCat Food Product #3\n");
	printf("--------------------\n");
	printf("SKU : ");
	scanf("%d", &p3.SKU);
	if (p3.SKU < 1) {
		numPos = 0;
		while (numPos == 0) {
			p3.SKU = 0;
			printf("\nERROR: Enter a positive value: ");
			scanf("%d", &p3.SKU);
			if (p3.SKU < 1) {
				numPos = 1;
			}
		}
	}
	printf("\nPRICE : $");
	scanf("%.2lf", &p3.price);
	if (p3.price < 1) {
		numPos = 0;
		while (numPos == 0) {
			p3.price = 0;
			printf("\nERROR: Enter a positive value: ");
			scanf("%.2lf", &p3.price);
			if (p3.price < 1) {
				numPos = 1;
			}
		}
	}
	printf("\nWEIGHT (LBS) : ");
	scanf("%.2lf", &p3.weight);
	if (p3.weight < 1) {
		numPos = 0;
		while (numPos == 0) {
			p3.weight = 0;
			printf("\nERROR: Enter a positive value: ");
			scanf("%.2lf", &p3.weight);
			if (p3.weight < 1) {
				numPos = 1;
			}
		}
	}
	printf("\nCALORIES/SERV.: ");
	scanf("%d", &p3.CalPerServ);
	if (p3.CalPerServ < 1) {
		numPos = 0;
		while (numPos == 0) {
			p3.CalPerServ = 0;
			printf("\nERROR: Enter a positive value: ");
			scanf("%d", &p3.CalPerServ);
			if (p3.CalPerServ < 1) {
				numPos = 1;
			}
		}
	}
	return 0;
}

// 5. Display the formatted table header
int displayCatFoodHeader() {
	printf("\n\nSKU $Price Bag-lbs Cal/Serv\n");
	printf("------- ---------- ---------- --------\n");
	return 0;
}

// 6. Display a formatted record of cat food data
int displayCatFoodData() {
	printf("%07d %10.2lf %10.1lf %8d\n", p1.SKU, p1.price, p1.weight,
		p1.CalPerServ);
	printf("%07d %10.2lf %10.1lf %8d\n", p2.SKU, p2.price, p2.weight,
		p2.CalPerServ);
	printf("%07d %10.2lf %10.1lf %8d\n", p3.SKU, p3.price, p3.weight,
		p3.CalPerServ);
	return 0;
}

// 7. Logic entry point
int start() {
	return 0;
}
